#!/usr/bin/env python3

import sys
import math
import random

def read_numbers_from_file(file_path):
    with open(file_path, 'r') as f:
        return [int(line.strip()) for line in f]

def gcd(a, b):
    while b:
        a, b = b, a % b
    return abs(a)

# Pollard's rho algorithm for optimization
def pollards_rho(n):
    if n % 2 == 0:
        return 2, n // 2

    x = random.randint(1, n - 1)
    y = x
    c = random.randint(1, n - 1)
    d = 1

    while d == 1:
        x = (x * x + c) % n
        y = (y * y + c) % n
        y = (y * y + c) % n

        d = gcd(abs(x - y), n)

    return d, n // d

def main():
    if len(sys.argv) < 2:
        print("Usage: factors <file>")
        return

    file_path = sys.argv[1]
    numbers = read_numbers_from_file(file_path)

    for n in numbers:
        p, q = pollards_rho(n)

        # Sort p and q so that the larger factor appears first
        p, q = sorted([p, q], reverse=True)

        if p * q != n:
            print(f"Failed to factor {n}")
        else:
            print(f"{n}={p}*{q}")

if __name__ == "__main__":
    main()
